<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show App" id="2" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="631" y="215"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            if os.path.isdir(behaviorPath):
               behaviorPath = os.path.join(behaviorPath, "")
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                    self.logger.error("appsFolderFragment is not in behaviorPath")
                    return None
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")
            return None

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self._getAppName()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Python Script" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="343" y="291"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[# coding=utf-8
__version__ = "1.1-threaded-py27"

import sys

import qi, math, time, threading
import stk.runner, stk.events, stk.services, stk.logging

class Joint(object):
    """
    Multijoint threaded hold service for Python 2.7 with directional speech.
    """
    APP_ID = "com.aldebaran.Joint"

    # Supported joints and user-friendly labels
    JOINTS = [
        "RShoulderPitch", "RElbowYaw", "RWristYaw",
        "LShoulderPitch", "LElbowYaw", "LWristYaw",
        "HeadYaw"
    ]
    LABELS = {
        "RShoulderPitch": "Right shoulder",
        "RElbowYaw":      "Right elbow",
        "RWristYaw":      "Right wrist",
        "LShoulderPitch": "Left shoulder",
        "LElbowYaw":      "Left elbow",
        "LWristYaw":      "Left wrist",
        "HeadYaw":        "Head"
    }

    def __init__(self, qiapp):
        self.qiapp    = qiapp
        self.services = stk.services.ServiceCache(qiapp.session)
        self.logger   = stk.logging.get_logger(qiapp.session, self.APP_ID)
        self.tts      = self.services.ALTextToSpeech
        self.motion   = self.services.ALMotion

        # Prep arms
        try:
            self.motion.wakeUp()
            for limb in ("RArm", "LArm"):
                self.motion.setBreathEnabled(limb, False)
                self.motion.setIdlePostureEnabled(limb, False)
            # self.motion.setStiffnesses(["RArm","LArm"], [1.0,1.0])
        except Exception as e:
            self.logger.warning("Arm prep failed: %s", e)

        # Initialize targets and threads
        self.targets  = {j: 0.0 for j in self.JOINTS}
        self._events  = {j: threading.Event() for j in self.JOINTS}
        self._threads = {j: None for j in self.JOINTS}

    def _hold_loop(self, joint_name):
        stop_evt = self._events[joint_name]
        while not stop_evt.is_set():
            try:
                self.motion.setAngles(joint_name,
                                      self.targets[joint_name],
                                      0.05)
            except Exception as e:
                self.logger.warning("%s hold-loop failed: %s", joint_name, e)
            time.sleep(0.1)

    def _compute_direction(self, joint_name, old_deg, new_deg):
        delta = new_deg - old_deg
        if abs(delta) < 1e-6:
            return "to %dÂ°" % new_deg
        if "ShoulderPitch" in joint_name:
            return "raising" if delta < 0 else "lowering"
        if "ElbowYaw" in joint_name:
            return "twisting inward" if delta < 0 else "twisting outward"
        if "WristYaw" in joint_name:
            return "rotating inward" if delta < 0 else "rotating outward"
        if "HeadYaw" in joint_name:
            return "turning left" if delta > 0 else "turning right"
        return ""

    @qi.bind(returnType=qi.Void, paramsType=[qi.String, qi.Float])
    def setJoint(self, joint_name, angle_deg):
        if joint_name not in self.JOINTS:
            self.logger.warning("Unknown joint: %s", joint_name)
            return
        # compute old and clamp new
        old_deg = self.targets[joint_name] * 180.0 / math.pi
        # clamp based on joint type
        if "ShoulderPitch" in joint_name:
            lo, hi = -90.0, 90.0
        elif "ElbowYaw" in joint_name:
            lo, hi = -120.0, 120.0
        elif "WristYaw" in joint_name:
            lo, hi = -180.0, 180.0
        else:  # HeadYaw
            lo, hi = -90.0, 90.0
        deg = max(lo, min(hi, angle_deg))
        rad = deg * math.pi / 180.0
        self.targets[joint_name] = rad

        # speak direction
        direction = self._compute_direction(joint_name, old_deg, deg)
        try:
            self.tts.say("%s %s" % (self.LABELS[joint_name], direction))
        except Exception:
            pass

        # initial move
        try:
            self.motion.setAngles(joint_name, rad, 0.25)
        except Exception as e:
            self.logger.warning("Initial move %s failed: %s", joint_name, e)

        # restart hold thread
        evt = self._events[joint_name]
        evt.set()
        th = self._threads[joint_name]
        if th:
            th.join(0.5)
        new_evt = threading.Event()
        self._events[joint_name] = new_evt
        t = threading.Thread(target=self._hold_loop, args=(joint_name,))
        t.daemon = True
        t.start()
        self._threads[joint_name] = t

    @qi.bind(returnType=qi.Float, paramsType=[qi.String])
    def getJoint(self, joint_name):
        rad = self.targets.get(joint_name, 0.0)
        return rad * 180.0 / math.pi

    @qi.bind(returnType=qi.Void, paramsType=[qi.String])
    def resetJoint(self, joint_name):
        if joint_name not in self.JOINTS:
            return
        evt = self._events[joint_name]
        evt.set()
        th = self._threads[joint_name]
        if th:
            th.join(0.5)
        neutral = 80.0 if "ShoulderPitch" in joint_name else 0.0
        rad = neutral * math.pi / 180.0
        try:
            self.motion.setAngles(joint_name, rad, 0.25)
        except Exception as e:
            self.logger.warning("Reset %s failed: %s", joint_name, e)

    @qi.bind(returnType=qi.Void, paramsType=[])
    def stop(self):
        # stop all threads and reset angles
        for j in self.JOINTS:
            evt = self._events[j]
            evt.set()
            th = self._threads[j]
            if th:
                th.join(0.5)
            # reset
            neutral = 80.0 if "ShoulderPitch" in j else 0.0
            rad = neutral * math.pi / 180.0
            try:
                self.motion.setAngles(j, rad, 0.4)
            except:
                pass

        # rest and exit
        self.qiapp.quit()
    @qi.nobind
    def on_stop(self):
        # ensure complete shutdown
        self.stop()
if __name__ == "__main__":
    stk.runner.run_service(Joint)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>